PROJECT 1 : To create a STOPWATCH using GUI in Python

import tkinter as tk

seconds = 0
minutes = 0
hour = 0
timer_id = None

def fun1():
    global seconds, minutes, hour, timer_id
    seconds += 1
    if seconds == 60:
        seconds = 0
        minutes += 1
    if minutes == 60:
        minutes = 0
        hour += 1
    current_time = f'{hour:02d}:{minutes:02d}:{seconds:02d}'
    label.config(text=current_time)
    timer_id = root.after(1000, fun1)

def start():
    global timer_id
    if timer_id is None:
        fun1()

def stop():
    global timer_id
    if timer_id is not None:
        root.after_cancel(timer_id)
        timer_id = None

def reset():
    global seconds, minutes, hour
    seconds = 0
    minutes = 0
    hour = 0
    label.config(text="00:00:00")
    stop()

root = tk.Tk()
root.title("First Application")
root.geometry('300x300')

label = tk.Label(root, text="00:00:00")
label.pack()

submit = tk.Button(root, text='Start', command=start)
submit.pack()

submit = tk.Button(root, text='Stop', command=stop)
submit.pack()

submit = tk.Button(root, text='Reset', command=reset)
submit.pack()

root.mainloop()

----------------------x---------------------------------x-----------------------------------------

PROJECT 2: Create and accessing database in SQL wit Python Integration

import psycopg2

sriram = psycopg2.connect(host="localhost", user="postgres", password="0070", database="sriram_1")
cursor = sriram.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS student (
        student_id SERIAL PRIMARY KEY,
        name TEXT,
        age INTEGER,
        sex TEXT,
        class TEXT,
        section TEXT,
        pythonMark INTEGER,
        DataBaseMark INTEGER,
        MathMark INTEGER,
        StatsMark INTEGER
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS teacher (
        teacher_id SERIAL PRIMARY KEY,
        name TEXT,
        age INTEGER,
        sex TEXT,
        class_Teacher TEXT,
        teacher_salary REAL
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS principal (
        principal_id SERIAL PRIMARY KEY,
        name TEXT,
        age INTEGER,
        sex TEXT,
        teacher_id INTEGER,
        principal_salary REAL,
        FOREIGN KEY (teacher_id) REFERENCES teacher (teacher_id)
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS admin (
        admin_id SERIAL PRIMARY KEY,
        name TEXT,
        email TEXT,
        password TEXT
    )
''')

def create_student():
    name = input("Enter student name: ")
    age = int(input("Enter student age: "))
    sex = input("Enter student sex: ")
    class_ = input("Enter student class: ")
    section = input("Enter student section: ")
    python_mark = int(input("Enter Python marks: "))
    db_mark = int(input("Enter Database marks: "))
    math_mark = int(input("Enter Math marks: "))
    stats_mark = int(input("Enter Statistics marks: "))

    query = '''
        INSERT INTO student (name, age, sex, class, section, pythonMark, DataBaseMark, MathMark, StatsMark)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
    '''
    cursor.execute(query, (name, age, sex, class_, section, python_mark, db_mark, math_mark, stats_mark))
    sriram.commit()
    print("Student record created successfully.")

def read_students():
    query = "SELECT * FROM student"
    cursor.execute(query)
    students = cursor.fetchall()

    for student in students:
        print("Student ID:", student[0])
        print("Name:", student[1])
        print("Age:", student[2])
        print("Sex:", student[3])
        print("Class:", student[4])
        print("Section:", student[5])
        print("Python Mark:", student[6])
        print("Database Mark:", student[7])
        print("Math Mark:", student[8])
        print("Stats Mark:", student[9])
        print("")

def update_student():
    student_id = int(input("Enter student ID to update: "))
    check_query = "SELECT * FROM student WHERE student_id = %s"
    cursor.execute(check_query, (student_id,))
    existing_student = cursor.fetchone()

    if existing_student:
        name = input("Enter updated student name: ")
        age = int(input("Enter updated student age: "))
        sex = input("Enter updated student sex: ")
        class_ = input("Enter updated student class: ")
        section = input("Enter updated student section: ")
        python_mark = int(input("Enter updated Python marks: "))
        db_mark = int(input("Enter updated Database marks: "))
        math_mark = int(input("Enter updated Math marks: "))
        stats_mark = int(input("Enter updated Statistics marks: "))

        update_query = '''
            UPDATE student SET
            name = %s,
            age = %s,
            sex = %s,
            class = %s,
            section = %s,
            pythonMark = %s,
            DataBaseMark = %s,
            MathMark = %s,
            StatsMark = %s
            WHERE student_id = %s
        '''
        cursor.execute(
            update_query,
            (name, age, sex, class_, section, python_mark, db_mark, math_mark, stats_mark, student_id),
        )
        sriram.commit()
        print("Student record updated successfully.")
    else:
        print("Student with ID", student_id, "does not exist.")

def delete_student():
    student_id = int(input("Enter student ID to delete: "))

    check_query = "SELECT * FROM student WHERE student_id = %s"
    cursor.execute(check_query, (student_id,))
    existing_student = cursor.fetchone()

    if existing_student:
        delete_query = "DELETE FROM student WHERE student_id = %s"
        cursor.execute(delete_query, (student_id,))
        sriram.commit()
        print("Student record deleted successfully.")
    else:
        print("Student with ID", student_id, "does not exist.")

def create_teacher():
    name = input("Enter teacher name: ")
    age = int(input("Enter teacher age: "))
    sex = input("Enter teacher sex: ")
    class_teacher = input("Enter class of teacher: ")
    teacher_salary = float(input("Enter teacher salary: "))
    
    query = '''
        INSERT INTO teacher (name, age, sex, classTeacher, teacher_salary)
        VALUES (%s, %s, %s, %s, %s)
    '''
    cursor.execute(query, (name, age, sex, class_teacher, teacher_salary))
    sriram.commit()
    print("Teacher record created successfully.")

def read_teacher():
    query = "SELECT * FROM teacher"
    cursor.execute(query)
    teachers = cursor.fetchall()

    for teacher in teachers:
        print("Teacher ID:", teacher[0])
        print("Name:", teacher[1])
        print("Age:", teacher[2])
        print("Sex:", teacher[3])
        print("Class of Teacher:", teacher[4])
        print("Teacher Salary:", teacher[5])
        print("")

def update_teacher():
    teacher_id = int(input("Enter teacher ID to update: "))
    check_query = "SELECT * FROM teacher WHERE teacher_id = %s"
    cursor.execute(check_query, (teacher_id,))
    existing_teacher = cursor.fetchone()

    if existing_teacher:
        name = input("Enter updated teacher name: ")
        age = int(input("Enter updated teacher age: "))
        sex = input("Enter updated teacher sex: ")
        class_teacher = input("Enter updated class teacher: ")
        teacher_salary = float(input("Enter updated teacher salary: "))

        update_query = '''
            UPDATE teacher SET
            name = %s,
            age = %s,
            sex = %s,
            classTeacher = %s,
            teacher_salary = %s
            WHERE teacher_id = %s
        '''
        cursor.execute(
            update_query,
            (name, age, sex, class_teacher, teacher_salary, teacher_id),
        )
        sriram.commit()
        print("Teacher record updated successfully.")
    else:
        print("Teacher with ID", teacher_id, "does not exist.")

def delete_teacher():
    teacher_id = int(input("Enter teacher ID to delete: "))

    check_query = "SELECT * FROM teacher WHERE teacher_id = %s"
    cursor.execute(check_query, (teacher_id,))
    existing_teacher = cursor.fetchone()

    if existing_teacher:
        delete_query = "DELETE FROM teacher WHERE teacher_id = %s"
        cursor.execute(delete_query, (teacher_id,))
        sriram.commit()
        print("Teacher record deleted successfully.")
    else:
        print("Teacher with ID", teacher_id, "does not exist.")

def create_principal():
    name = input("Enter principal name: ")
    age = int(input("Enter principal age: "))
    sex = input("Enter principal sex: ")
    principal_id = int(input("Enter principal ID: "))
    principal_salary = float(input("Enter principal salary: "))
    
    query = '''
        INSERT INTO principal (name, age, sex, principal_id, principal_salary)
        VALUES (%s, %s, %s, %s, %s)
    '''
    cursor.execute(query, (name, age, sex, principal_id, principal_salary))
    sriram.commit()
    print("Principal record created successfully.")

def read_principal():
    query = "SELECT * FROM principal"
    cursor.execute(query)
    principals = cursor.fetchall()

    for principal in principals:
        print("Principal ID:", principal[0])
        print("Name:", principal[1])
        print("Age:", principal[2])
        print("Sex:", principal[3])
        print("Principal ID:", principal[4])
        print("Principal Salary:", principal[5])
        print("")

def update_principal():
    principal_id = int(input("Enter principal ID to update: "))
    check_query = "SELECT * FROM principal WHERE principal_id = %s"
    cursor.execute(check_query, (principal_id,))
    existing_principal = cursor.fetchone()

    if existing_principal:
        name = input("Enter updated principal name: ")
        age = int(input("Enter updated principal age: "))
        sex = input("Enter updated principal sex: ")
        principal_id = int(input("Enter updated principal ID: "))
        principal_salary = float(input("Enter updated principal salary: "))

        update_query = '''
            UPDATE principal SET
            name = %s,
            age = %s,
            sex = %s,
            principal_id = %s,
            principal_salary = %s
            WHERE principal_id = %s
        '''
        cursor.execute(
            update_query,
            (name, age, sex, principal_id, principal_salary, principal_id),
        )
        sriram.commit()
        print("Principal record updated successfully.")
    else:
        print("Principal with ID", principal_id, "does not exist.")

def delete_principal():
    principal_id = int(input("Enter principal ID to delete: "))

    check_query = "SELECT * FROM principal WHERE principal_id = %s"
    cursor.execute(check_query, (principal_id,))
    existing_principal = cursor.fetchone()

    if existing_principal:
        delete_query = "DELETE FROM principal WHERE principal_id = %s"
        cursor.execute(delete_query, (principal_id,))
        sriram.commit()
        print("Principal record deleted successfully.")
    else:
        print("Principal with ID", principal_id, "does not exist.")

admin_name = input("admin name: ")
admin_email = input("admin email: ")
admin_password = input("admin password: ")
admin = True

if admin:
    print("Press 1 for students")
    print("Press 2 for teachers")
    print("Press 3 for Principal")
    print("Press any other key to quit")

    key = int(input("Enter your choice: "))

    if key == 1:
        print("Press 1 to create a student")
        print("Press 2 to read student records")
        print("Press 3 to update a student record")
        print("Press 4 to delete a student record")

        operation = int(input("Enter your choice: "))

        if operation == 1:
            create_student()
        elif operation == 2:
            read_students()
        elif operation == 3:
            update_student()
        elif operation == 4:
            delete_student()
        else:
            print("Invalid choice.")

    elif key == 2:
        print("Press 1 to create a teacher")
        print("Press 2 to read teacher records")
        print("Press 3 to update a teacher record")
        print("Press 4 to delete a teacher record")

        operation = int(input("Enter your choice: "))

        if operation == 1:
            create_teacher()
        elif operation == 2:
            read_teacher()
        elif operation == 3:
            update_teacher()
        elif operation == 4:
            delete_teacher()
        else:
            print("Invalid choice.")

    elif key == 3:
        print("Press 1 to create a principal")
        print("Press 2 to read principal records")
        print("Press 3 to update a principal record")
        print("Press 4 to delete a principal record")

        operation = int(input("Enter your choice: "))

        if operation == 1:
            create_principal()
        elif operation == 2:
            read_principal()
        elif operation == 3:
            update_principal()
        elif operation == 4:
            delete_principal()
        else:
            print("Invalid choice.")

    else:
        print("Exiting.")

sriram.close()

----------------------x---------------------------------x-----------------------------------------

Project 3: To Fetch Data from URL
import requests
url = "https://api.github.com/repos/pandas-dev/pandas/issues"
response = requests.get(url)
if response.status_code == 200:
    data = response.json()

    # 1. Fetch all the elements' IDs
    ids = [item['id'] for item in data]

    # 2. Fetch all the avatar URLs for the users
    avatar_urls = [item['user']['avatar_url'] for item in data]

    # 3. Fetch all the URLs from the label
    urls_from_label = [item['labels'][0]['url'] for item in data if item['labels']]

    # 4. Fetch the color and ID by using requests and handle errors
    colors_and_ids = []
    for url in urls_from_label:
        try:
            label_response = requests.get(url)
            if label_response.status_code == 200:
                label_data = label_response.json()
                color = label_data['color']
                label_id = label_data['id']
                colors_and_ids.append((color, label_id))
            else:
                print(f"Error fetching label data for URL: {url}")
        except requests.exceptions.RequestException as e:
            print(f"An error occurred: {e}")
    
    # Print the fetched data
    print("IDs:", ids)
    print("Avatar URLs:", avatar_urls)
    print("Colors and IDs:", colors_and_ids)

else:
    print(f"Request failed with status code: {response.status_code}")
    
    
  ----------------------x---------------------------------x-----------------------------------------
